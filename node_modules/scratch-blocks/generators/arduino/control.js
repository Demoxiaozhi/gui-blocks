Blockly.Arduino['control_wait'] = function(block) {
    // duration: math_positive_number
    var delayTime = Blockly.Arduino.valueToCode(block, 'DURATION', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var code = 'delay(' + delayTime + ');\n';
    return code;
};

Blockly.Arduino['control_repeat'] = function(block) {
    // times: math_whole_number
    var repeats = Blockly.Arduino.valueToCode(block, 'TIMES', Blockly.Arduino.ORDER_ATOMIC) || '0';
    
    var branch = Blockly.Arduino.statementToCode(block, 'SUBSTACK');
    branch = Blockly.Arduino.addLoopTrap(branch, block.id);     // TODO: understand this? addLoopTrap is defined in core/generator.js
    
    var loopVar = Blockly.Arduino.variableDB_.getDistinctName('count', Blockly.Variables.NAME_TYPE);
    
    var code = 'for (int ' + loopVar + ' = 0; ' +
        loopVar + ' < ' + repeats + '; ' +
        loopVar + '++) {\n' +
        branch + '}\n';
    
    return code;
};
