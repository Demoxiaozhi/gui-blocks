Blockly.Arduino['dev_arduinoMain'] = function(block) {
    // Edited version of Blockly.Generator.prototype.statementToCode
    function statementToCodeNoTab(block, name) {
        var targetBlock = block.getInputTargetBlock(name);
        var code = Blockly.Arduino.blockToCode(targetBlock);
        if (!goog.isString(code)) {
            throw 'Expecting code from statement block "' + targetBlock.type + '".';
        }
        return code;
    }

    var setupBranch = Blockly.Arduino.statementToCode(block, 'SUBSTACK');
    //var setupCode = Blockly.Arduino.scrub_(block, setupBranch); No comment block
    if (setupBranch) {
        Blockly.Arduino.addSetup('userSetupCode', setupBranch, true);
    }

    var loopBranch = statementToCodeNoTab(block, 'SUBSTACK2');
    //var loopcode = Blockly.Arduino.scrub_(block, loopBranch); No comment block
    return loopBranch;
};

Blockly.Arduino['dev_port_menu'] = function(block) {
    var port = block.getFieldValue('PORT');
    var code = port.toString();
    return [code, Blockly.Arduino.ORDER_ATOMIC];
}

Blockly.Arduino['dev_ledon'] = function(block) {
    Blockly.Arduino.addInclude('ScratchPi', '#include <ScratchPi.h>');

    // PORT: dev_port_menu
    var port = Blockly.Arduino.valueToCode(block, 'PORT', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var code = 'ScratchPi.LEDOn(' + port + ');\n';
    return code;
};

Blockly.Arduino['dev_ledoff'] = function(block) {
    Blockly.Arduino.addInclude('ScratchPi', '#include <ScratchPi.h>');

    // PORT: dev_port_menu
    var port = Blockly.Arduino.valueToCode(block, 'PORT', Blockly.Arduino.ORDER_ATOMIC) || '0';
    var code = 'ScratchPi.LEDOff(' + port + ');\n';
    return code;
};
